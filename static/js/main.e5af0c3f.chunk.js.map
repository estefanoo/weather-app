{"version":3,"sources":["images/location.svg","ApiContext.js","functions/getApiWeather.js","components/weatherSearch/WeatherSearch.js","components/weatherToday/WeatherToday.js","functions/convertDates.js","components/weatherInfo/WeatherInfo.js","App.js","index.js"],"names":["module","exports","ApiContext","createContext","getApiWeather","localization","a","fetch","api","json","data","woeid","weather","data2","WeatherSearch","setDataWeather","useContext","useState","inputValue","setInputValue","cities","setCities","handleSubmit","e","preventDefault","trim","length","getWeathers","consolidated_weather","title","timezone","slice","cit","console","log","className","onClick","document","querySelector","style","width","onSubmit","onChange","currentTarget","value","disabled","type","map","city","index","key","handleBoxCities","WeatherToday","dataWeather","setLocalization","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","handleLocation","useEffect","weathers","zone","src","location","alt","weather_state_abbr","Math","floor","the_temp","date","dateString","Date","toDateString","split","convertDateToday","applicable_date","WeatherInfo","nextWeathers","nextWeather","convertDateNextDays","max_temp","min_temp","wind_speed","humidity","visibility","air_pressure","App","Provider","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.e5af0c3f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/location.2b5e332a.svg\";","import {createContext} from 'react';\r\n\r\nexport const ApiContext = createContext(null);","// funcion para obtener el clima\r\n\r\nexport const getApiWeather = async(localization) =>{\r\n        \r\n    // busco la zona con las coordenadas\r\n    const api = await fetch(`https://www.metaweather.com/api/location/search/?${localization}`);\r\n    // transformo a json\r\n    const data = await api.json();\r\n    // accedo a la primera ciudad y tomo el valor del \"woeid\"\r\n    const {woeid} = data[0];\r\n    // busco la temperatura con el valor del \"woeid\"\r\n    const weather = await fetch(`https://www.metaweather.com/api/location/${woeid}`);\r\n    // transformo a json\r\n    const data2 = await weather.json();\r\n\r\n    return data2;\r\n}","import React, { useContext, useState } from 'react'\r\n\r\nimport { ApiContext } from '../../ApiContext';\r\nimport {getApiWeather} from '../../functions/getApiWeather';\r\n\r\nimport './weatherSearch.css';\r\n\r\nexport const WeatherSearch = () => {\r\n\r\n    const {setDataWeather} = useContext(ApiContext);\r\n\r\n    // valor del ciudad a buscar\r\n    const [inputValue, setInputValue] = useState('')\r\n    // las ciudades\r\n    const [cities, setCities] = useState([])\r\n\r\n    // guardar valor de la ciudad del <select>\r\n    const handleSearchLocation = (e) => {setInputValue(e.currentTarget.value)}\r\n\r\n    // guardar al clickear en una ciudad\r\n    const handleBoxCities = (city) => {\r\n        setInputValue(city)\r\n    }\r\n\r\n    // formulario submit \r\n    const handleSubmit= async(e) =>{\r\n        // obtener datos de la api\r\n        e.preventDefault();\r\n        try {\r\n            if(inputValue.trim().length > 3){\r\n                const getWeathers = await getApiWeather(`query=${inputValue}`)\r\n                // obtengo los datos que quiero aplicando destructuring\r\n                const {consolidated_weather,title,timezone} = getWeathers;\r\n                // guardo los datos\r\n                setDataWeather({\r\n                    \"weathers\":consolidated_weather[0],\r\n                    \"city\":title,\r\n                    \"zone\":timezone,\r\n                    \"nextWeathers\":consolidated_weather.slice(1)\r\n                });\r\n                setCities(cit => [inputValue,...cit])\r\n            }   \r\n        } catch (error) {\r\n            console.log(error);    \r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"weatherSearch animate__animated animate__slideInLeft\">\r\n\r\n            <div className=\"weatherSearch-close\">\r\n                <span onClick={()=>{document.querySelector('.weatherSearch').style.width=\"0\"}}>X</span>\r\n            </div>\r\n\r\n            <div className=\"weatherSearch-header\">\r\n                <form onSubmit={handleSubmit}>\r\n                    <select onChange={handleSearchLocation}>\r\n                        <option className=\"country\" value=\"\">Choose a city</option>\r\n                        <option className=\"country\" disabled>*Argentina</option>\r\n                        <option value={\"Buenos Aires\"}>*Buenos Aires</option>\r\n                        <option className=\"country\" disabled>*USA</option>\r\n                        <option value={\"San Francisco\"}>San Francisco</option>\r\n                        <option value={\"New York\"}>New York</option>\r\n                        <option className=\"country\" disabled>*Peru</option>\r\n                        <option value={\"Lima\"}>Lima</option>\r\n                        <option className=\"country\" disabled>*Brazil</option>\r\n                        <option value={\"Brasília\"}>Brasília</option>\r\n                        <option value={\"Rio de Janeiro\"}>Rio de Janeiro</option>\r\n                        <option value={\"Salvador\"}>Salvador</option>\r\n                        <option value={\"São Paulo\"}>São Paulo</option>\r\n                    </select>\r\n                    <button type=\"submit\">\r\n                        Search\r\n                    </button>\r\n                </form>\r\n            </div>\r\n\r\n            <form className=\"weatherSearch-cities\" onSubmit={handleSubmit}>\r\n                {cities && cities.map((city,index) =>\r\n                    <button key={index} onClick={() => handleBoxCities(city)} type=\"submit\">\r\n                        <span>{city}</span>\r\n                    </button>\r\n                )} \r\n            </form>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react';\r\n\r\nimport { ApiContext } from '../../ApiContext';\r\nimport { WeatherSearch } from '../weatherSearch/WeatherSearch';\r\n\r\n// funciones\r\nimport {getApiWeather} from '../../functions/getApiWeather';\r\nimport {convertDateToday} from '../../functions/convertDates';\r\n// imagenes\r\nimport location from '../../images/location.svg';\r\n// styles\r\nimport './weatherToday.css'\r\n\r\nexport const WeatherToday = () => {\r\n\r\n    // datos del clima\r\n    const {dataWeather, setDataWeather} = useContext(ApiContext);\r\n    \r\n    // datos de la coordenada - state\r\n    const [localization, setLocalization] = useState('lattlong=0,0')\r\n    \r\n    // geolocalizacion - coordenadas \r\n    navigator.geolocation.getCurrentPosition(position => {\r\n        // guardo las coordenadas\r\n        setLocalization(`lattlong=${position.coords.latitude},${position.coords.longitude}`);\r\n    });\r\n    \r\n    // funcion - cuando hago click en el icono geolocalizacion\r\n    const handleLocation = async() =>{\r\n        // obtener datos de la api\r\n        const getWeathers = await getApiWeather(localization)\r\n        // obtengo los datos que quiero aplicando destructuring\r\n        const {consolidated_weather,title,timezone} = getWeathers;\r\n        // guardo los datos\r\n        setDataWeather({\r\n            \"weathers\":consolidated_weather[0],\r\n            \"city\":title,\r\n            \"zone\":timezone,\r\n            \"nextWeathers\":consolidated_weather.slice(1)\r\n        });\r\n    }\r\n    \r\n    useEffect(() => {\r\n        handleLocation()\r\n    }, [])\r\n\r\n\r\n    const {weathers, city, zone} = dataWeather;\r\n\r\n    return (\r\n        <div className=\"weatherToday\">\r\n\r\n            {/* div de boton header */}\r\n            <div className=\"weatherToday-buttons\">\r\n\r\n                {/* boton buscador */}\r\n                <button \r\n                    className=\"weatherToday-button-search\"\r\n                    onClick={()=>{document.querySelector('.weatherSearch').style.width=\"100%\"}}\r\n                >\r\n                    Search for places\r\n                </button>\r\n\r\n                {/* boton geolocalizacion */}\r\n                <div \r\n                    className=\"weatherToday-button-ubication\"\r\n                    onClick={handleLocation}\r\n                >\r\n                    <img src={location} alt=\"\"/>\r\n                </div>\r\n            </div>\r\n\r\n            {/* informacion del clima de hoy */}\r\n            <div className=\"weatherToday-info\">\r\n                \r\n                <img \r\n                    src={weathers && `https://www.metaweather.com/static/img/weather/${weathers.weather_state_abbr}.svg`} \r\n                    alt=\"wheaterIcon\"\r\n                />\r\n\r\n                <div className=\"weatherToday-info-temperature\">\r\n                    <h1>{weathers && Math.floor(weathers.the_temp)}</h1>\r\n                    <span>°C</span>\r\n                </div>\r\n\r\n                <h2>{city}</h2>\r\n\r\n                <div>\r\n                    <p>Today - {weathers && convertDateToday(weathers.applicable_date)}</p>\r\n                    <span>{zone}</span>\r\n                </div>\r\n            </div>\r\n\r\n            {/* caja - buscador */}\r\n            {<WeatherSearch/>}\r\n\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const convertDateToday = (date) =>{\r\n    const dateNum = new Date(`${date}`);\r\n    const dateString = dateNum.toDateString().split(' ');\r\n    const dateNewFormat = dateString[1] + ' ' + dateString[2] + ' ' + dateString[3];\r\n    return dateNewFormat\r\n}\r\n\r\nexport const convertDateNextDays = (date) =>{\r\n    const dateNum = new Date(`${date}`);\r\n    const dateString = dateNum.toDateString().split(' ');\r\n    const dateNewFormat = dateString[0] + ' ' + dateString[2] + ' ' + dateString[1];\r\n    return dateNewFormat\r\n}\r\n","import React, { useContext } from 'react';\r\nimport { ApiContext } from '../../ApiContext';\r\n\r\nimport {convertDateNextDays} from '../../functions/convertDates';\r\n\r\nimport './weatherInfo.css';\r\n\r\nexport const WeatherInfo = () => {\r\n\r\n    const {dataWeather} = useContext(ApiContext);\r\n\r\n    const {weathers, nextWeathers} = dataWeather;\r\n\r\n    return (\r\n        <div className=\"weatherInfo\">\r\n            {/* clima de los siguientes dias */}\r\n            <div className=\"weatherInfo-week-cards\">\r\n                { nextWeathers && nextWeathers.map( (nextWeather,index) =>\r\n                    <div className=\"weatherInfo-week-card\" key={index}>\r\n                        <p>{convertDateNextDays(nextWeather.applicable_date)}</p>\r\n                        <img \r\n                            src={`https://www.metaweather.com/static/img/weather/${nextWeather.weather_state_abbr}.svg`} \r\n                            alt=\"wheaterIcon\"\r\n                        />\r\n                        <div className=\"numbers\">\r\n                            <span>{Math.floor(nextWeather.max_temp)}°C</span>\r\n                            <span>{Math.floor(nextWeather.min_temp)}°C</span>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n\r\n            <div className=\"weatherInfo-today\">\r\n                {/* informacion del clima de hoy*/}\r\n                <div className=\"weatherInfo-today-title\">\r\n                    <h3>Today's Hightlights</h3>\r\n                </div>\r\n                <div className=\"weatherInfo-today-cards\">\r\n                    <div className=\"weatherInfo-today-card\">\r\n                        <p>Wind status</p>\r\n                        <div className=\"weatherInfo-today-especific\">\r\n                            <h4>{weathers && Math.floor(weathers.wind_speed)} </h4>\r\n                            <p> mph</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"weatherInfo-today-card\">\r\n                        <p>Humidity</p>\r\n                        <div className=\"weatherInfo-today-especific\">\r\n                            <h4>{weathers && weathers.humidity}</h4>\r\n                            <p>%</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"weatherInfo-today-card\">\r\n                        <p>Visibility</p>\r\n                        <div className=\"weatherInfo-today-especific\">\r\n                            <h4>{weathers && Math.floor(weathers.visibility)}</h4>\r\n                            <p>miles</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"weatherInfo-today-card\">\r\n                        <p>Air Pressure</p>\r\n                        <div className=\"weatherInfo-today-especific\"> \r\n                            <h4>{weathers && weathers.air_pressure}</h4>\r\n                            <p>mb</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\n\nimport { WeatherToday } from './components/weatherToday/WeatherToday';\nimport { WeatherInfo } from './components/weatherInfo/WeatherInfo';\nimport {ApiContext} from './ApiContext';\n\nimport './styles.css';\n\n\nfunction App() {\n\n  const [dataWeather, setDataWeather] = useState({\n    \"weathers\":null,\n    \"city\":null,\n    \"zone\":null,\n    \"nextWeathers\":null\n  })\n\n  return (\n    <ApiContext.Provider value={{\n      dataWeather,\n      setDataWeather\n    }}>\n\n      <div className=\"container\">\n        <WeatherToday />\n        <WeatherInfo />\n      </div>\n\n    </ApiContext.Provider> \n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}